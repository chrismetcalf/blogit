blogit.vim requires `py.test`_ and `MiniMock`_ to run the tests. To run the
tests simply run `py.test` in this folder.

.. _py.test: http://codespeak.net/py/dist/test/index.html
.. _MiniMock: http://pypi.python.org/pypi/MiniMock/


Acceptance Test
===============

Currently blogit.vim is in the process of including acceptance tests. These
will need to have a test Blog with its login credentials.

In addition there are tests which run in real vim. These tests require `execnet
<http://codespeak.net/execnet/>` to be installed. As closing vim clears the
terminal when it closes (and py.test captures the output on failers) you might
want to redirect the output into a file::

   $ py.test -A > out

Setup
-----

.. warning::
   Don't use a Blog account that you use for anything but bug testing. These
   tests cat include writing and changing of Blog posts.

In the test-directory create the file mybloglogin.py and add for each Blog you
want to test a function like this::

    >>> def blog_login__myblogname(constructor):
    ...     return constructor('myxmlrpcurl', 'myusername', 'mypassword')

Replace myblogname, myxmlrpcurl, myuername and mypassword with the values
your would set in blogit.vim for that blog (blog_name, blogit_url,
blogit_username, blogit_password).

Writing new Tests
-----------------

From the writing perspective there is no difference to other tests. Just use
a funcarg belonging to the acceptance test (they are prefixed by 'accept_').
Like accept_blogconfig or accept_vim_vars::

    >>> def test_accept(accept_blogconfig):
    ...     # Should Fail
    ...     assert accept_blogconfig.blog_name == 'bla'

